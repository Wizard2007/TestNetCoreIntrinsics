using System;
using System.Collections.Generic;
using BenchmarkDotNet.Attributes;

namespace XorShift.BenchmarckDotNet.Benchmarks
{
    public class XorshiftCommonBenchmark<T> where T  : Random, new() 
    {
        #region Private fields

        private byte[] _buffer = new byte[0];

        protected T _xorshift = new T();

        #endregion

        [ParamsSource(nameof(Buffers))]
        public int N { get; set; }
        public IEnumerable<int> Buffers => new[] {
            1000, 5000,
            10000, 50000,
            100000, 500000,
            1000000, 5000000,
            10000000, 20000000,
/*
            1024, 5*1024, 10*1024, 50*1024, 100*1024, 500*1024,
            1024*1024, 5*1024*1024, 10*1024*1024, 20*1024*1024,
  */          
            1024, 2*1024, 4*1024, 5*1024, 8*1024, 10*1024, 16*1024, 32*1024, 50*1024, 64*1024, 100*1024,
            128*1024, 256*1024, 500*1024, /*512*1024,*/
            512*1024,528*1024,544*1024,560*1024,576*1024,592*1024,608*1024,624*1024,640*1024,656*1024,
            672*1024,688*1024,704*1024,720*1024,736*1024,752*1024,768*1024,784*1024,800*1024,816*1024,
            832*1024,848*1024,864*1024,880*1024,896*1024,912*1024,928*1024,944*1024,960*1024,976*1024,
            992*1024,1008*1024,1024*1024,1040*1024,1056*1024,1072*1024,1088*1024,1104*1024,1120*1024,
            1136*1024,1152*1024,1168*1024,1184*1024,1200*1024,1216*1024,1232*1024,1248*1024,1264*1024,
            1280*1024,1296*1024,1312*1024,1328*1024,1344*1024,1360*1024,1376*1024,1392*1024,1408*1024,
            1424*1024,1440*1024,1456*1024,1472*1024,1488*1024,1504*1024,1520*1024,1536*1024,1552*1024,
            1568*1024,1584*1024,1600*1024,
            /*1024*1024,*/ 2*1024*1024, 4*1024*1024, 5*1024*1024, 8*1024*1024, 10*1024*1024, 16*1024*1024, 32*1024*1024
            /*, 64*1024*1024,128*1024*1024, 256*1024*1024, 512*1024*1024*/
        };

        #region Benchmarks

        [Benchmark]
        public void TestFillBuffer()
            => _xorshift.NextBytes(_buffer);

        #endregion

        #region Iteration Setup

        [IterationSetup]
        public void IterationSetup()
            => _buffer = (_buffer?.Length ?? 0) != N ? new byte[N] : _buffer;
        
        #endregion
    }
}